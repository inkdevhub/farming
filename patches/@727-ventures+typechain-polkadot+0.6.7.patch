diff --git a/node_modules/@727-ventures/typechain-polkadot/src/templates/events.hbs b/node_modules/@727-ventures/typechain-polkadot/src/templates/events.hbs
index de9abc7..0401924 100644
--- a/node_modules/@727-ventures/typechain-polkadot/src/templates/events.hbs
+++ b/node_modules/@727-ventures/typechain-polkadot/src/templates/events.hbs
@@ -1,8 +1,9 @@
 import type * as EventTypes from '../event-types/{{{fileName}}}';
+import EVENT_TYPE from '../event-data/{{{fileName}}}.json';
 import type {ContractPromise} from "@polkadot/api-contract";
 import type {ApiPromise} from "@polkadot/api";
-import {getEventTypeDescription} from "../shared/utils";
 import {handleEventReturn} from "@727-ventures/typechain-types";
+export { EVENT_TYPE }
 
 export default class EventsClass {
 	private __nativeContract : ContractPromise;
@@ -25,7 +26,7 @@ export default class EventsClass {
 				_event[event.args[i]!.name] = args[i]!.toJSON();
 			}
 
-			callback(handleEventReturn(_event, getEventTypeDescription('{{name}}', '{{../fileName}}')) as EventTypes.{{name}});
+			callback(handleEventReturn(_event, EVENT_TYPE['{{name}}']) as EventTypes.{{name}});
 		};
 
 		return this.__subscribeOnEvent(callbackWrapper, (eventName : string) => eventName == '{{name}}');
diff --git a/node_modules/@727-ventures/typechain-polkadot/src/templates/mixed-methods.hbs b/node_modules/@727-ventures/typechain-polkadot/src/templates/mixed-methods.hbs
index 3670315..5113ca9 100644
--- a/node_modules/@727-ventures/typechain-polkadot/src/templates/mixed-methods.hbs
+++ b/node_modules/@727-ventures/typechain-polkadot/src/templates/mixed-methods.hbs
@@ -10,9 +10,9 @@ import { txSignAndSend } from '@727-ventures/typechain-types';
 import type * as ArgumentTypes from '../types-arguments/{{{fileName}}}';
 import type * as ReturnTypes from '../types-returns/{{{fileName}}}';
 import type BN from 'bn.js';
+import {TYPE} from "../query/{{{fileName}}}"
 //@ts-ignore
 import {ReturnNumber} from '@727-ventures/typechain-types';
-import {getTypeDescription} from './../shared/utils';
 // @ts-ignore
 import type {EventRecord} from "@polkadot/api/submittable";
 import {decodeEvents} from "../shared/utils";
diff --git a/node_modules/@727-ventures/typechain-polkadot/src/templates/query.hbs b/node_modules/@727-ventures/typechain-polkadot/src/templates/query.hbs
index c7de2a4..17e76f0 100644
--- a/node_modules/@727-ventures/typechain-polkadot/src/templates/query.hbs
+++ b/node_modules/@727-ventures/typechain-polkadot/src/templates/query.hbs
@@ -8,14 +8,15 @@ import { queryJSON, queryOkJSON, handleReturnType } from '@727-ventures/typechai
 import type * as ArgumentTypes from '../types-arguments/{{{fileName}}}';
 import type * as ReturnTypes from '../types-returns/{{{fileName}}}';
 import type BN from 'bn.js';
+import TYPE from '../data/{{{fileName}}}.json'
 //@ts-ignore
 import {ReturnNumber} from '@727-ventures/typechain-types';
-import {getTypeDescription} from './../shared/utils';
 {{#if additionalImports.length}}
 {{#each additionalImports}}
 import { {{#each values}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}} } from '{{{path}}}';
 {{/each}}{{/if}}
 
+export { TYPE }
 export default class Methods {
 	private __nativeContract : ContractPromise;
 	private __apiPromise: ApiPromise;
diff --git a/node_modules/@727-ventures/typechain-polkadot/src/templates/raw/shared/utils.ts b/node_modules/@727-ventures/typechain-polkadot/src/templates/raw/shared/utils.ts
index 9dba401..ac966fc 100644
--- a/node_modules/@727-ventures/typechain-polkadot/src/templates/raw/shared/utils.ts
+++ b/node_modules/@727-ventures/typechain-polkadot/src/templates/raw/shared/utils.ts
@@ -1,18 +1,7 @@
-import fs from "fs";
 import type {ContractPromise} from "@polkadot/api-contract";
 import {handleEventReturn} from "@727-ventures/typechain-types";
 
-export function getTypeDescription(id: number | string, fileName: string): any {
-	const types = JSON.parse(fs.readFileSync(__dirname + `/../data/${fileName}.json`, 'utf8'));
-	return types[id];
-}
-
-export function getEventTypeDescription(name: string, fileName: string): any {
-	const types = JSON.parse(fs.readFileSync(__dirname + `/../event-data/${fileName}.json`, 'utf8'));
-	return types[name];
-}
-
-export function decodeEvents(events: any[], contract: ContractPromise, fileName: string): any[] {
+export function decodeEvents(events: any[], contract: ContractPromise, EVENT_TYPE: any): any[] {
 	return events.filter((record: any) => {
 		const { event } = record;
 
@@ -30,7 +19,7 @@ export function decodeEvents(events: any[], contract: ContractPromise, fileName:
 			_event[event.args[i]!.name] = args[i]!.toJSON();
 		}
 
-		handleEventReturn(_event, getEventTypeDescription(event.identifier.toString(), fileName));
+		handleEventReturn(_event, EVENT_TYPE[event.identifier.toString()]);
 
 		return {
 			name: event.identifier.toString(),
diff --git a/node_modules/@727-ventures/typechain-polkadot/src/templates/tx-sign-and-send.hbs b/node_modules/@727-ventures/typechain-polkadot/src/templates/tx-sign-and-send.hbs
index 458805d..e5f6df4 100644
--- a/node_modules/@727-ventures/typechain-polkadot/src/templates/tx-sign-and-send.hbs
+++ b/node_modules/@727-ventures/typechain-polkadot/src/templates/tx-sign-and-send.hbs
@@ -2,6 +2,7 @@
 
 import type { ContractPromise } from '@polkadot/api-contract';
 import type { KeyringPair } from '@polkadot/keyring/types';
+import type { SignerOptions } from '@polkadot/api/submittable/types';
 import type { ApiPromise } from '@polkadot/api';
 import type { GasLimit, GasLimitAndRequiredValue, Result } from '@727-ventures/typechain-types';
 import { txSignAndSend } from '@727-ventures/typechain-types';
@@ -10,6 +11,7 @@ import type BN from 'bn.js';
 // @ts-ignore
 import type {EventRecord} from "@polkadot/api/submittable";
 import {decodeEvents} from "../shared/utils";
+import { EVENT_TYPE } from "../events/{{{fileName}}}";
 {{#if additionalImports.length}}
 {{#each additionalImports}}
 import { {{#each values}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}} } from '{{{path}}}';
@@ -43,10 +45,11 @@ export default class Methods {
 		{{{name}}}: {{{type.tsStr}}},
 	{{/each}}
 		__options ? : {{#if payable}}GasLimitAndRequiredValue{{else}}GasLimit{{/if}},
+		__signerOptions ? : Partial<SignerOptions>,
 	){{{buildReturnType this}}}{
 		return {{{buildReturn this}}} "{{{toCamelCaseForFunctions originalName}}}", (events: EventRecord) => {
-			return decodeEvents(events, this.__nativeContract, "{{../fileName}}");
-		}, [{{#each args}}{{{name}}}{{#unless @last}}, {{/unless}}{{/each}}], __options);
+			return decodeEvents(events, this.__nativeContract, EVENT_TYPE);
+		}, [{{#each args}}{{{name}}}{{#unless @last}}, {{/unless}}{{/each}}], __options, __signerOptions);
 	}
 
 {{/each}}
diff --git a/node_modules/@727-ventures/typechain-polkadot/src/utils/handlebars-helpers.ts b/node_modules/@727-ventures/typechain-polkadot/src/utils/handlebars-helpers.ts
index 78bcac7..e6688cc 100644
--- a/node_modules/@727-ventures/typechain-polkadot/src/utils/handlebars-helpers.ts
+++ b/node_modules/@727-ventures/typechain-polkadot/src/utils/handlebars-helpers.ts
@@ -88,12 +88,12 @@ Handlebars.registerHelper( 'buildReturnType', function(fn: Method) {
 	return '';
 });
 
-Handlebars.registerHelper('buildWrapper', function(fn: Method, fileName: any) {
+Handlebars.registerHelper('buildWrapper', function(fn: Method) {
 	if(fn.methodType == 'query' && fn.returnType?.tsStr == 'ReturnNumber') {
 		return ', (result) => { return new ReturnNumber(result as (number | string)); }';
 	}
 	if(fn.methodType == 'query' && fn.returnType && fn.returnType?.tsStr !== 'null' && fn.returnType?.tsStr !== 'number' && fn.returnType?.tsStr !== 'string' && fn.returnType?.tsStr !== 'boolean') {
-		return `, (result) => { return handleReturnType(result, getTypeDescription(${fn.returnType?.id}, '${fileName.data.root.fileName}')); }`;
+		return `, (result) => { return handleReturnType(result, TYPE[${fn.returnType?.id}]); }`;
 	}
 });
 
