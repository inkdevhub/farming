diff --git a/node_modules/@supercolony/typechain-types/dist/src/query.d.ts b/node_modules/@supercolony/typechain-types/dist/src/query.d.ts
index 48cca0b..f49b8e5 100644
--- a/node_modules/@supercolony/typechain-types/dist/src/query.d.ts
+++ b/node_modules/@supercolony/typechain-types/dist/src/query.d.ts
@@ -1,9 +1,11 @@
 import type { ContractPromise } from "@polkadot/api-contract";
 import type { AnyJson } from '@polkadot/types-codec/types';
 import type { RequestArgumentType, GasLimitAndValue } from './types';
+import type { WeightV2 } from '@polkadot/types/interfaces'
 declare type QueryReturnType<T> = {
     value: T;
-    gasConsumed: bigint;
+    gasConsumed: WeightV2;
+    gasRequired: WeightV2;
 };
 export type { QueryReturnType, };
 export { _genValidGasLimitAndValue, };
@@ -22,7 +24,8 @@ export declare function queryOkJSON<T>(nativeContract: ContractPromise, callerAd
  */
 export declare function queryOutput(nativeContract: ContractPromise, callerAddress: string, title: string, args?: readonly RequestArgumentType[], gasLimitAndValue?: GasLimitAndValue): Promise<{
     output: import("@polkadot/types-codec/types").Codec;
-    gasConsumed: bigint;
+    gasConsumed: bigint | WeightV2;
+    gasRequired: bigint | WeightV2;
 }>;
 declare function _genValidGasLimitAndValue(gasLimitAndValue?: GasLimitAndValue): GasLimitAndValue;
 export declare function handleReturnType(result: any, typeDescription: any): any;
diff --git a/node_modules/@supercolony/typechain-types/dist/src/query.js b/node_modules/@supercolony/typechain-types/dist/src/query.js
index 1f5e337..0acd17d 100644
--- a/node_modules/@supercolony/typechain-types/dist/src/query.js
+++ b/node_modules/@supercolony/typechain-types/dist/src/query.js
@@ -79,12 +79,12 @@ function queryJSON(nativeContract, callerAddress, title, args, gasLimitAndValue,
         return json;
     }; }
     return __awaiter(this, void 0, void 0, function () {
-        var _a, output, gasConsumed, _value, error;
+        var _a, output, gasConsumed, gasRequired, _value, error;
         return __generator(this, function (_b) {
             switch (_b.label) {
                 case 0: return [4 /*yield*/, queryOutput(nativeContract, callerAddress, title, args, gasLimitAndValue)];
                 case 1:
-                    _a = _b.sent(), output = _a.output, gasConsumed = _a.gasConsumed;
+                    _a = _b.sent(), output = _a.output, gasConsumed = _a.gasConsumed, gasRequired = _a.gasRequired;
                     _value = output.toJSON();
                     if (_value && typeof _value === 'object') {
                         if ('err' in _value) {
@@ -100,6 +100,7 @@ function queryJSON(nativeContract, callerAddress, title, args, gasLimitAndValue,
                     return [2 /*return*/, {
                             value: handler(output.toJSON()),
                             gasConsumed: gasConsumed,
+                            gasRequired: gasRequired,
                         }];
             }
         });
@@ -118,12 +119,12 @@ title, args, gasLimitAndValue, handler) {
         return json;
     }; }
     return __awaiter(this, void 0, void 0, function () {
-        var _a, output, gasConsumed, _value, error;
+        var _a, output, gasConsumed, gasRequired, _value, error;
         return __generator(this, function (_b) {
             switch (_b.label) {
                 case 0: return [4 /*yield*/, queryOutput(nativeContract, callerAddress, title, args, gasLimitAndValue)];
                 case 1:
-                    _a = _b.sent(), output = _a.output, gasConsumed = _a.gasConsumed;
+                    _a = _b.sent(), output = _a.output, gasConsumed = _a.gasConsumed, gasRequired = _a.gasRequired;
                     _value = output.toJSON();
                     if (_value == null || typeof _value !== 'object') {
                         error = {
@@ -135,6 +136,7 @@ title, args, gasLimitAndValue, handler) {
                     return [2 /*return*/, {
                             value: handler(_value),
                             gasConsumed: gasConsumed,
+                            gasRequired: gasRequired,
                         }];
             }
         });
@@ -148,7 +150,7 @@ function queryOutput(nativeContract, callerAddress,
 //
 title, args, gasLimitAndValue) {
     return __awaiter(this, void 0, void 0, function () {
-        var contractAddress, error_1, _args, _gasLimitAndValue, response, error, caughtError_1, gasConsumed, result, output, resValueStr, resValueJSON;
+        var contractAddress, error_1, _args, _gasLimitAndValue, response, error, caughtError_1, gasConsumed, gasRequired, result, output, resValueStr, resValueJSON;
         var _a;
         return __generator(this, function (_b) {
             switch (_b.label) {
@@ -180,7 +182,7 @@ title, args, gasLimitAndValue) {
                     console.error("\nContract.queryString(".concat(title, ") error:"), "\n > error:", error, '\n');
                     throw error;
                 case 4:
-                    gasConsumed = response.gasConsumed, result = response.result, output = response.output;
+                    gasConsumed = response.gasConsumed, gasRequired = response.gasRequired, result = response.result, output = response.output;
                     resValueStr = output ? output.toString() : null;
                     resValueJSON = output ? output.toJSON() : null;
                     if (result.isErr)
@@ -194,15 +196,12 @@ title, args, gasLimitAndValue) {
                             issue: 'FAIL_AFTER_CALL::RESULT_NOT_OK',
                             _asError: result.isErr ? result.asErr : undefined,
                         };
-                    if (output == null)
-                        error = {
-                            issue: 'OUTPUT_IS_NULL',
-                        };
                     if (error)
                         throw error;
                     return [2 /*return*/, {
                             output: output,
-                            gasConsumed: gasConsumed.toBigInt(),
+                            gasConsumed: 'toBigInt' in gasConsumed ? gasConsumed.toBigInt() : gasConsumed,
+                            gasRequired: 'toBigInt' in gasRequired ? gasRequired.toBigInt() : gasRequired,
                         }];
             }
         });
@@ -229,6 +228,13 @@ function handleReturnType(result, typeDescription) {
         return new types_1.ReturnNumber(result);
     if (typeof result !== 'object' || typeof typeDescription !== 'object' || typeDescription.isPrimitive)
         return result;
+    if (typeDescription.name.startsWith('Result<')) {
+        Object.entries(result).forEach(function (_a) {
+            var key = _a[0], value = _a[1];
+            var index = key === 'ok' ? 0 : 1;
+            result[key] = handleReturnType(value, typeDescription.body[index]);
+        });
+    }
     if (typeDescription.name === 'Array') {
         Object.entries(result).forEach(function (_a) {
             var key = _a[0], value = _a[1];
@@ -236,6 +242,12 @@ function handleReturnType(result, typeDescription) {
         });
         return result;
     }
+    if (typeDescription.name === 'Option') {
+        Object.entries(result).forEach(function (obj) {
+            result[obj[0]] = handleReturnType(obj[1], typeDescription.body[0].body[obj[0]]);
+        });
+        return result;
+    }
     Object.entries(result).forEach(function (obj) {
         result[obj[0]] = handleReturnType(obj[1], typeDescription.body[obj[0]]);
     });
diff --git a/node_modules/@supercolony/typechain-types/dist/src/tx.d.ts b/node_modules/@supercolony/typechain-types/dist/src/tx.d.ts
index 917eefa..cfcb908 100644
--- a/node_modules/@supercolony/typechain-types/dist/src/tx.d.ts
+++ b/node_modules/@supercolony/typechain-types/dist/src/tx.d.ts
@@ -1,6 +1,6 @@
 import type { ContractPromise } from "@polkadot/api-contract";
 import type { RequestArgumentType, GasLimitAndValue } from './types';
-import type { SubmittableExtrinsic } from '@polkadot/api/submittable/types';
+import type { SubmittableExtrinsic, SignerOptions } from '@polkadot/api/submittable/types';
 import type { KeyringPair } from '@polkadot/keyring/types';
 import type { Registry } from '@polkadot/types-codec/types';
 import type { ApiPromise, SubmittableResult } from "@polkadot/api";
@@ -21,14 +21,14 @@ declare type SignAndSendSuccessResponse = {
 export type { SignAndSendSuccessResponse, };
 export declare function txSignAndSend(nativeAPI: ApiPromise, nativeContract: ContractPromise, keyringPair: KeyringPair, title: string, eventHandler: (event: EventRecord[]) => {
     [index: string]: any;
-}, args?: readonly RequestArgumentType[], gasLimitAndValue?: GasLimitAndValue): Promise<SignAndSendSuccessResponse>;
+}, args?: readonly RequestArgumentType[], gasLimitAndValue?: GasLimitAndValue, signerOptions?: Partial<SignerOptions>): Promise<SignAndSendSuccessResponse>;
 export declare function buildSubmittableExtrinsic(nativeContract: ContractPromise, title: string, args?: readonly RequestArgumentType[], gasLimitAndValue?: GasLimitAndValue): SubmittableExtrinsic<"promise", import("@polkadot/types/types").ISubmittableResult>;
 /**
  * (i) For reference, see:
  * 	- https://polkadot.js.org/docs/api/cookbook/tx#how-do-i-get-the-decoded-enum-for-an-extrinsicfailed-event
  * 	- `@redspot/patract/buildTx`
  */
-export declare function _signAndSend(registry: Registry, extrinsic: SubmittableExtrinsic<'promise'>, signer: KeyringPair, eventHandler: (event: EventRecord[]) => {
+export declare function _signAndSend(registry: Registry, extrinsic: SubmittableExtrinsic<'promise'>, signer: KeyringPair, eventHandler: (event: EventRecord[], signerOptions?: Partial<SignerOptions>) => {
     [index: string]: any;
 }): Promise<SignAndSendSuccessResponse>;
 //# sourceMappingURL=tx.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@supercolony/typechain-types/dist/src/tx.js b/node_modules/@supercolony/typechain-types/dist/src/tx.js
index e0685f6..406b1bf 100644
--- a/node_modules/@supercolony/typechain-types/dist/src/tx.js
+++ b/node_modules/@supercolony/typechain-types/dist/src/tx.js
@@ -67,9 +67,9 @@ var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
 Object.defineProperty(exports, "__esModule", { value: true });
 exports._signAndSend = exports.buildSubmittableExtrinsic = exports.txSignAndSend = void 0;
 var query_1 = require("./query");
-function txSignAndSend(nativeAPI, nativeContract, keyringPair, title, eventHandler, args, gasLimitAndValue) {
+function txSignAndSend(nativeAPI, nativeContract, keyringPair, title, eventHandler, args, gasLimitAndValue, signerOptions) {
     var submittableExtrinsic = buildSubmittableExtrinsic(nativeContract, title, args, gasLimitAndValue);
-    return _signAndSend(nativeAPI.registry, submittableExtrinsic, keyringPair, eventHandler);
+    return _signAndSend(nativeAPI.registry, submittableExtrinsic, keyringPair, eventHandler, signerOptions);
 }
 exports.txSignAndSend = txSignAndSend;
 function buildSubmittableExtrinsic(nativeContract, title, args, gasLimitAndValue) {
@@ -92,7 +92,7 @@ exports.buildSubmittableExtrinsic = buildSubmittableExtrinsic;
  * 	- https://polkadot.js.org/docs/api/cookbook/tx#how-do-i-get-the-decoded-enum-for-an-extrinsicfailed-event
  * 	- `@redspot/patract/buildTx`
  */
-function _signAndSend(registry, extrinsic, signer, eventHandler) {
+function _signAndSend(registry, extrinsic, signer, eventHandler, signerOptions) {
     return __awaiter(this, void 0, void 0, function () {
         var signerAddress;
         return __generator(this, function (_a) {
@@ -103,47 +103,34 @@ function _signAndSend(registry, extrinsic, signer, eventHandler) {
                         txHash: extrinsic.hash.toHex(),
                     };
                     extrinsic
-                        .signAndSend(signer, function (result) {
+                        .signAndSend(signerOptions ? signerAddress : signer,
+                                     { nonce: -1, ...signerOptions },
+                                     function (result) {
                         if (result.status.isInBlock) {
                             actionStatus.blockHash = result.status.asInBlock.toHex();
                         }
-                        if (result.status.isFinalized || result.status.isInBlock) {
+                        if (result.status.isFinalized) {
                             actionStatus.events = eventHandler(result.events);
                             result.events
                                 .filter(function (_a) {
                                 var section = _a.event.section;
                                 return section === 'system';
-                            })
-                                .forEach(function (event) {
-                                var _a = event.event, data = _a.data, method = _a.method;
-                                if (method === 'ExtrinsicFailed') {
-                                    var dispatchError = data[0];
-                                    var message = dispatchError.type;
-                                    if (dispatchError.isModule) {
-                                        try {
-                                            var mod = dispatchError.asModule;
-                                            var error = registry.findMetaError(new Uint8Array([
-                                                mod.index.toNumber(),
-                                                mod.error.toNumber()
-                                            ]));
-                                            message = "".concat(error.section, ".").concat(error.name).concat(Array.isArray(error.docs)
-                                                ? "(".concat(error.docs.join(''), ")")
-                                                : error.docs || '');
-                                        }
-                                        catch (error) {
-                                            // swallow
-                                        }
-                                    }
+                            });
+                            if (!result.isError && !result.dispatchError) {
+                                actionStatus.result = result;
+                                resolve(actionStatus);
+                            } else {
+                                let message = 'Transaction failed';
+
+                                if (result.dispatchError?.isModule) {
+                                    const decoded = registry.findMetaError(result.dispatchError.asModule);
+                                    message = `${decoded?.section.toUpperCase()}.${decoded?.method}: ${decoded?.docs}`;
                                     actionStatus.error = {
                                         message: message,
                                     };
                                     reject(actionStatus);
                                 }
-                                else if (method === 'ExtrinsicSuccess') {
-                                    actionStatus.result = result;
-                                    resolve(actionStatus);
-                                }
-                            });
+                            }
                         }
                         else if (result.isError) {
                             actionStatus.error = {
diff --git a/node_modules/@supercolony/typechain-types/dist/src/types.d.ts b/node_modules/@supercolony/typechain-types/dist/src/types.d.ts
index 1538d98..55920e8 100644
--- a/node_modules/@supercolony/typechain-types/dist/src/types.d.ts
+++ b/node_modules/@supercolony/typechain-types/dist/src/types.d.ts
@@ -1,12 +1,13 @@
 import BN from 'bn.js';
-import type { ContractExecResultErr } from '@polkadot/types/interfaces/contracts/types';
+import type { DispatchError } from '@polkadot/types/interfaces/system';
 import type { AnyJson } from "@polkadot/types-codec/types";
+import type { WeightV2 } from '@polkadot/types/interfaces'
 export declare type RequestArgumentType = number | string | boolean | bigint | (string | number)[] | BN | null | AnyJson | Object;
 export interface GasLimit {
     /**
      * Defaults to `-1`
      */
-    gasLimit?: bigint | BN | string | number;
+    gasLimit?: bigint | BN | string | number | WeightV2;
 }
 export interface GasLimitAndValue extends GasLimit {
     /**
@@ -37,10 +38,10 @@ export declare type QueryCallError = MethodDoesntExistError | ErrorWithTexts & (
 } | {
     issue: 'FAIL_AFTER_CALL::IS_ERROR';
     _resultIsOk: boolean;
-    _asError?: ContractExecResultErr;
+    _asError?: DispatchError;
 } | {
     issue: 'FAIL_AFTER_CALL::RESULT_NOT_OK';
-    _asError?: ContractExecResultErr;
+    _asError?: DispatchError;
 } | {
     issue: 'OUTPUT_IS_NULL';
 });
@@ -65,6 +66,7 @@ export declare class ReturnNumber {
     toString(): string;
     toHuman(): string;
     toNumber(): number;
+    toBigInt(): bigint;
     static ToBN(value: number | string): BN;
 }
 export interface ReturnedEvent {
diff --git a/node_modules/@supercolony/typechain-types/dist/src/types.js b/node_modules/@supercolony/typechain-types/dist/src/types.js
index d19aa99..f2aee0c 100644
--- a/node_modules/@supercolony/typechain-types/dist/src/types.js
+++ b/node_modules/@supercolony/typechain-types/dist/src/types.js
@@ -61,6 +61,9 @@ var ReturnNumber = /** @class */ (function () {
     ReturnNumber.prototype.toNumber = function () {
         return this.rawNumber.toNumber();
     };
+    ReturnNumber.prototype.toBigInt = function () {
+        return BigInt(this.toString());
+    }
     ReturnNumber.ToBN = function (value) {
         return new ReturnNumber(value).rawNumber;
     };
diff --git a/node_modules/@supercolony/typechain-types/package.json b/node_modules/@supercolony/typechain-types/package.json
index b27d6ab..61aa0d5 100644
--- a/node_modules/@supercolony/typechain-types/package.json
+++ b/node_modules/@supercolony/typechain-types/package.json
@@ -24,8 +24,8 @@
   "main": "dist/index.js",
   "homepage": "https://github.com/Supercolony-net/typechain-polkadot#readme",
   "dependencies": {
-    "@polkadot/api": "^9.6.1",
-    "@polkadot/api-contract": "^9.6.1",
+    "@polkadot/api": "9.8.2",
+    "@polkadot/api-contract": "9.8.2",
     "@types/bn.js": "^5.1.0",
     "@types/node": "^18.0.3",
     "camelcase": "^6.3.0",
